function [ err ] = l2_error_pw_const(mesh_1d, apprx_val, exact_f, nr_int_p)
%Compute the l2 error of a piecewise constant approximation of a function
%   mesh_1d     corresponds to panels (array of size (2 times N) representing
%               the intervals)
%   apprx_val   piecewise constant approximation of the function on the
%               panels
%   exact_f     function handle of the approximated function
%   nr_int_p    number of integration points used for numerical quadrature
%               (up to 5 integration points are supported)
  [weights, nodes] = get_quadrature_data (nr_int_p - 1);
  nr_intrvls = size(mesh_1d, 2);
  err = 0;
  for i=1:nr_intrvls
    h_intrvl = 0.5 * (mesh_1d(2,i) - mesh_1d(1,i));
    loc_nodes = 0.5 * (mesh_1d(1,i) + mesh_1d(2,i)) + h_intrvl * nodes;
    err = err + h_intrvl * (exact_f(loc_nodes) - apprx_val(i)).^2 * weights';
  end
  err = sqrt(err);
end

%initialize gau√ü chebyshev integration weights and nodes
function [weights, nodes] = get_quadrature_data (deg)
  if (deg == 0)
    nodes = 0;
    weights = 2;
  elseif (deg == 1)
    nodes = [-1/sqrt(3), 1/sqrt(3)];
    weights = [1, 1];
  elseif (deg == 2)
    nodes = [-sqrt(3/5), 0, sqrt(3/5)];
    weights = [5/9, 8/9, 5/9];
  elseif (deg == 3)
    nodes = [-0.861136311594053,...
             -0.339981043584856,...
              0.339981043584856,...
              0.861136311594053];
    weights = [(18-sqrt(30))/36,...
               (18+sqrt(30))/36,...
               (18+sqrt(30))/36,...
               (18-sqrt(30))/36];
  elseif (deg == 4)
    nodes = [-0.906179845938664,...
             -0.538469310105683,...
              0,...
              0.538469310105683,...
             0.906179845938664];
    weights = [(322-13*sqrt(70))/900,...
               (322+13*sqrt(70))/900,...
               128/225,...
               (322+13*sqrt(70))/900,...
               (322-13*sqrt(70))/900];
  else
    disp('max available deg is 4')
    nodes = [-0.906179845938664,...
             -0.538469310105683,...
              0,...
              0.538469310105683,...
             0.906179845938664];
    weights = [(322-13*sqrt(70))/900,...
               (322+13*sqrt(70))/900,...
               128/225,...
               (322+13*sqrt(70))/900,...
               (322-13*sqrt(70))/900];
  end
end